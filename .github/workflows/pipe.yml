name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger

env:
  NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
  NODE_VERSION: '18'

jobs:
  validate:
    name: 🔍 Validate and Test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run lint check
        run: npm run lint

      - name: 🔍 Type check
        run: npm run type-check || true  # Don't fail build on type errors

      - name: 🏗️ Build application
        run: npm run build

      # Uncomment when you add tests
      # - name: 🧪 Run tests
      #   run: npm test

  deploy-preview:
    name: 🚀 Deploy Preview
    needs: validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Deploy to Firebase Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: pr-${{ github.event.number }}
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

  deploy-production:
    name: 🚀 Deploy Production
    needs: validate
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🚀 Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels

      - name: 📢 Notify on Success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const message = '✅ Deployment successful! Site is live.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: 📢 Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const message = '❌ Deployment failed. Check the workflow logs for details.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  cleanup:
    name: 🧹 Cleanup
    needs: [deploy-preview, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 🗑️ Cleanup older deployment
        uses: actions/github-script@v6
        with:
          script: |
            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.workflow,
              status: 'completed'
            });

            const runs = workflows.data.workflow_runs
              .filter(run => run.id !== context.runId)
              .slice(2);  // Keep last 2 successful deployments

            for (const run of runs) {
              await github.rest.actions.deleteWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run.id
              });
            }

permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write
